package com.av.urbanway.data.parser

import com.av.urbanway.data.model.QueryType

class QueryParser {

    fun parseUserInput(input: String): QueryType? {
        val cleanInput = input.trim().lowercase()

        return when {
            // NEARBY queries
            cleanInput.contains("arrivi") ||
            cleanInput.contains("vicino") ||
            cleanInput.contains("near") ||
            cleanInput.contains("prossimi") -> QueryType.NEARBY

            // ROUTE DETAIL queries
            cleanInput.contains("linea") ||
            cleanInput.contains("bus") ||
            cleanInput.contains("tram") ||
            cleanInput.contains("metro") ||
            cleanInput.startsWith("15") ||
            cleanInput.startsWith("18") ||
            cleanInput.matches("\\d+".toRegex()) -> QueryType.ROUTEDETAIL

            // JOURNEY queries
            cleanInput.contains("come arrivare") ||
            cleanInput.contains("percorso") ||
            cleanInput.contains("raggiungere") ||
            cleanInput.contains("andare") ||
            cleanInput.contains("stazione") ||
            cleanInput.contains("centro") -> QueryType.JOURNEY

            // STOP DETAIL queries
            cleanInput.contains("fermata") ||
            cleanInput.contains("fermate") ||
            cleanInput.contains("stop") -> QueryType.STOPDETAIL

            else -> null
        }
    }

    fun extractRouteName(input: String): String? {
        val cleanInput = input.trim()

        // Try to extract route number/name
        val routePattern = "(?:linea\\s+)?(\\d+[a-z]?|[a-z]+)".toRegex(RegexOption.IGNORE_CASE)
        val match = routePattern.find(cleanInput)

        return match?.groupValues?.get(1)?.uppercase()
    }

    // Generate AUTOGENERATED messages for UI interactions (button clicks, modal selections)
    // NOT for user text input - those only get USER + BOT messages
    fun generateAutogeneratedText(input: String, queryType: QueryType): String {
        return when (queryType) {
            QueryType.NEARBY -> "Arrivi nelle vicinanze"
            QueryType.ROUTEDETAIL -> {
                val routeName = extractRouteName(input)
                if (routeName != null) "$routeName" else "Dettagli linea"
            }
            QueryType.STOPDETAIL -> "Informazioni fermata"
            QueryType.JOURNEY -> {
                when {
                    input.lowercase().contains("stazione") -> "Come arrivare in stazione"
                    input.lowercase().contains("centro") -> "Percorso per il centro cittÃ "
                    else -> "Percorso"
                }
            }
        }
    }

    fun generateBotResponse(queryType: QueryType, userInput: String = ""): String {
        return when (queryType) {
            QueryType.NEARBY -> "Ho trovato 4 fermate nelle vicinanze con prossimi arrivi"
            QueryType.ROUTEDETAIL -> {
                val routeName = extractRouteName(userInput)
                "Ecco le informazioni per la ${if (routeName != null) "linea $routeName" else "linea richiesta"}"
            }
            QueryType.STOPDETAIL -> "Dettagli della fermata e linee che transitano"
            QueryType.JOURNEY -> "Ho trovato il percorso migliore per te"
        }
    }
}