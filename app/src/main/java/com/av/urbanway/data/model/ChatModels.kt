package com.av.urbanway.data.model

import java.time.LocalDateTime

enum class MessageType {
    USER,
    AUTOGENERATED,
    BOT
}

enum class QueryType {
    NEARBY,
    ROUTEDETAIL,
    STOPDETAIL,
    JOURNEY
}

data class ChatMessage(
    val id: String,
    val type: MessageType,
    val content: String,
    val queryType: QueryType? = null,
    val data: TransitData? = null,
    val isCompact: Boolean = false,
    val lastUpdated: LocalDateTime,
    val timestamp: LocalDateTime = LocalDateTime.now()
)

sealed class TransitData {
    data class NearbyData(
        val stops: List<Stop>,
        val arrivals: List<Arrival>
    ) : TransitData()

    data class RouteDetailData(
        val route: Route,
        val stops: List<RouteStop>,
        val shapes: List<ShapePoint>
    ) : TransitData()

    data class StopDetailData(
        val stop: Stop,
        val arrivals: List<Arrival>,
        val routes: List<Route>
    ) : TransitData()

    data class JourneyData(
        val origin: Location,
        val destination: Location,
        val routes: List<JourneyRoute>,
        val duration: Int,
        val walkingTime: Int
    ) : TransitData()
}

data class Stop(
    val id: String,
    val name: String,
    val location: Location,
    val routes: List<String>
)

// JSON API Response Models (matching the actual API structure)
data class RouteDetailApiResponse(
    val stops: List<ApiStop>,
    val shapes: List<ApiShape>
)

data class ApiStop(
    val stop_id: String,
    val stop_code: String,
    val stop_name: String,
    val arrival_date: Int,
    val stop_lat: Double,
    val stop_lon: Double
)

data class ApiShape(
    val shape_pt_lat: Double,
    val shape_pt_lon: Double
)

// Nearby API Response Models (matching the actual nearby API structure)
data class NearbyApiResponse(
    val routes: List<ApiRoute>
)

data class ApiRoute(
    val route_id: String,
    val headsigns: List<ApiHeadsign>
)

data class ApiHeadsign(
    val trip_headsign: String,
    val stop_id: String,
    val stop_name: String,
    val distance_to_stop: Int,
    val stop_lat: Double,
    val stop_lon: Double,
    val departures: List<ApiDeparture>
)

data class ApiDeparture(
    val trip_id: String,
    val actual_departure_time: String,
    val wait_minutes: Int,
    val has_realtime_update: Boolean
)

// Journey API Response Models (matching the actual journey API structure)
data class JourneyApiResponse(
    val journeys: List<ApiJourney>
)

data class ApiJourney(
    val type: String,
    val r1: String,
    val t1: String,
    val h1: String,
    val dep: Int,
    val arr: Int,
    val stops: Int,
    val leg1_board_stop_id: Int,
    val leg1_board_stop_sequence: Int,
    val leg1_alight_stop_id: Int,
    val leg1_alight_stop_sequence: Int,
    val leg2_board_stop_id: Int?,
    val leg2_board_stop_sequence: Int?,
    val leg2_alight_stop_id: Int?,
    val leg2_alight_stop_sequence: Int?,
    val start_stop: Int,
    val start_walk: Double,
    val transfer_stop: Int?,
    val r2: String?,
    val t2: String?,
    val h2: String?,
    val end_stop: Int,
    val end_walk: Double,
    val transit_min: Int,
    val walk_min: Int,
    val total_min: Int
)

// Internal App Models (for UI)
data class RouteStop(
    val stopId: String,
    val stopCode: String,
    val stopName: String,
    val arrivalDate: Int,
    val stopLat: Double,
    val stopLon: Double
)

data class ShapePoint(
    val shapePtLat: Double,
    val shapePtLon: Double
)

data class RouteSelection(
    val routeId: String,
    val routeName: String,
    val headsign: String,
    val tripId: String,
    val displayText: String // e.g., "56 - TABACCHI"
)

data class Route(
    val id: String,
    val name: String,
    val type: TransportType,
    val color: String,
    val direction: String
)

data class Arrival(
    val routeId: String,
    val routeName: String,
    val direction: String,
    val scheduledTime: LocalDateTime,
    val realTimeMinutes: Int,
    val isRealTime: Boolean,
    val tripId: String
)

data class Location(
    val latitude: Double,
    val longitude: Double,
    val address: String? = null
)

data class JourneyRoute(
    val steps: List<JourneyStep>,
    val totalDuration: Int,
    val totalWalking: Int
)

data class JourneyStep(
    val type: StepType,
    val route: Route? = null,
    val fromStop: Stop? = null,
    val toStop: Stop? = null,
    val duration: Int,
    val walkingDistance: Int? = null
)

data class RealTimeUpdate(
    val routeId: String,
    val delay: Int,
    val status: String,
    val lastUpdated: LocalDateTime
)

enum class TransportType {
    BUS,
    TRAM,
    METRO,
    TRAIN
}

enum class StepType {
    WALK,
    BUS,
    TRAM,
    METRO,
    TRAIN
}