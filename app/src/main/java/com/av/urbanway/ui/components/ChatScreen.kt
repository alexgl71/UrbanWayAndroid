package com.av.urbanway.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.av.urbanway.data.model.*
import com.av.urbanway.data.parser.QueryParser
import com.av.urbanway.data.repository.ChatRepository
import com.av.urbanway.data.service.ChatService
import com.av.urbanway.data.service.HardcodedDataService
import kotlinx.coroutines.launch

@Composable
fun ChatScreen() {
    val chatRepository = ChatRepository()
    val queryParser = QueryParser()
    val dataService = HardcodedDataService()
    val chatService = ChatService(chatRepository, queryParser, dataService)

    val messages by chatRepository.messages.collectAsState()
    var userInput by remember { mutableStateOf("") }
    var showModal by remember { mutableStateOf<ChatMessage?>(null) }

    val scope = rememberCoroutineScope()

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1A1A2E)) // Dark background like screenshot
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // Header
            Surface(
                color = Color(0xFF1A1A2E),
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier.padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Assistente UrbanWay",
                        color = Color.White,
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Medium
                    )
                    Spacer(modifier = Modifier.weight(1f))
                    Text(
                        text = "Online â€¢ ${messages.size / 3} conversazioni",
                        color = Color.Gray,
                        fontSize = 12.sp
                    )
                }
            }

            // Chat messages
            LazyColumn(
                modifier = Modifier
                    .weight(1f)
                    .padding(top = 8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(messages.filter { message ->
                    // Filter out AUTOGENERATED messages when previous messages are compacted
                    if (message.type == MessageType.AUTOGENERATED) {
                        // Only show AUTOGENERATED if it's for the latest BOT message
                        val latestBotIndex = messages.indexOfLast { it.type == MessageType.BOT }
                        val currentIndex = messages.indexOf(message)
                        currentIndex >= latestBotIndex - 1 // Show if it's for current BOT message
                    } else {
                        true
                    }
                }) { message ->
                    ChatMessageItem(
                        message = message,
                        onViewDetails = {
                            showModal = message
                        }
                    )
                }
            }

            // Input field
            Surface(
                color = Color(0xFF1A1A2E),
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    OutlinedTextField(
                        value = userInput,
                        onValueChange = { userInput = it },
                        placeholder = { Text("Chiedimi qualcosa sui trasporti...", color = Color.Gray) },
                        modifier = Modifier.weight(1f),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedTextColor = Color.White,
                            unfocusedTextColor = Color.White,
                            focusedBorderColor = Color.Gray,
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(25.dp)
                    )

                    Spacer(modifier = Modifier.width(8.dp))

                    Button(
                        onClick = {
                            if (userInput.isNotBlank()) {
                                scope.launch {
                                    chatService.handleUserInput(userInput)
                                    userInput = ""
                                }
                            }
                        },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF4CAF50)
                        )
                    ) {
                        Text("Invia", color = Color.White)
                    }
                }
            }
        }

        // Show modal if needed
        showModal?.let { message ->
            when (message.queryType) {
                QueryType.NEARBY -> {
                    if (message.data is TransitData.NearbyData) {
                        NearbyModal(
                            data = message.data,
                            onDismiss = { showModal = null }
                        )
                    }
                }
                else -> {
                    // Handle other query types when implemented
                }
            }
        }
    }
}

@Composable
private fun ChatMessageItem(
    message: ChatMessage,
    onViewDetails: () -> Unit
) {
    when (message.type) {
        MessageType.USER -> {
            // User message bubble (right side)
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.End
            ) {
                Surface(
                    color = Color.White,
                    shape = RoundedCornerShape(18.dp)
                ) {
                    Text(
                        text = message.content,
                        color = Color.Black,
                        modifier = Modifier.padding(12.dp),
                        fontSize = 14.sp
                    )
                }
            }
        }

        MessageType.AUTOGENERATED -> {
            // System interpretation tag (left side)
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.Start
            ) {
                Surface(
                    color = Color(0xFF2C3E50),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Text(
                        text = message.content,
                        color = Color.White,
                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),
                        fontSize = 12.sp
                    )
                }
            }
        }

        MessageType.BOT -> {
            // Bot response card
            when (message.queryType) {
                QueryType.NEARBY -> {
                    if (message.data is TransitData.NearbyData) {
                        NearbyBotCard(
                            data = message.data,
                            isCompact = message.isCompact,
                            onViewDetails = onViewDetails
                        )
                    }
                }
                else -> {
                    // Fallback for other query types
                    Text(
                        text = message.content,
                        color = Color.White,
                        modifier = Modifier.padding(16.dp)
                    )
                }
            }
        }
    }
}